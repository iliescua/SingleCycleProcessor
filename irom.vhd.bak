--*********************************************************
--* FILENAME: irom.vhd
--* AUTHOR:   Dr. Durant <durant@msoe.edu> 
--* DATE:     2018-04-19
--* PROVIDES:
--* - a test program for the first single cycle processor
--* - calculates the sum of the first n integers
--*   where n is loaded into register R8
--* - sets memory[4] = 1 if sum >= 32
--* - infinite loops reading memory[4]
--*********************************************************

library ieee;
use ieee.std_logic_1164.all; -- 9-valued logic
use ieee.numeric_std.all; -- signed/unsigned and related operations.
-- Tutorial at http://www.synthworks.com/papers/vhdl_math_tricks_mapld_2003.pdf

--*********************************************************
--* ENTITY DECLARATION
--* INPUT PORTS
--* - A: 32-bit memory address
--*
--* OUTPUT PORTS
--* - RD: 32-bit memory data
--*
--* DISCUSSION
--* - this instruction ROM is a read-only memory
--* - it never writes and thus needs no sample clock
--* - it never writes and thus needs no reset
--* - ROM memories are simple truth tables
--*********************************************************

entity irom is
port(A: in std_logic_vector(31 downto 0);
     RD: out std_logic_vector(31 downto 0));
end entity irom;

architecture dataflow of irom is
-- Address format for this ROM:
-- Let there be up to 2^8 = 256 instructions starting at address 0.
-- Then there are up to 2^10 = 1024 bytes in the ROM organized as 256, 4-byte instructions
-- ADDR(31 downto 10) = 0 for valid program addresses
-- ADDR(9 downto 2) is the instruction number from 0 to 2^8-1=255
-- ADDR(1 downto 0) = 0 for each valid program address

subtype word_t is std_logic_vector(31 downto 0); -- ARM instructions are 32-bit _vectors
type memory_t is array(2**8-1 downto 0) of word_t; -- 2-D array type for the ROM, make >= number of words that will be in ROM

-- Use this to check for an invalid address:
constant ADDR_LEFT : std_logic_vector(31 downto 10) := (others => '0');

-- Return this instruction whenever an invalid address is given, to help with debugging:
constant B_HERE : word_t := x"EAFF_FFFE"; -- "here: b here" in machine code, imm24=0xFFFFFE=-2, rel. to PC+8

function init_rom
	return memory_t is
	-- Any instruction we don't explicitly put in the ROM will output a "here: b here" instruction:
	variable tmp : memory_t := (others => B_HERE);
	begin
		-- address/4 = address>>2 = instruction number in the ROM array
		tmp(to_integer(unsigned'(X"00000000")/4)) := X"E3A0_800A"; -- main: mov r8, #0xa
		tmp(to_integer(unsigned'(X"00000004")/4)) := X"E3A0_9000"; --       mov r9, #0
		tmp(to_integer(unsigned'(X"00000008")/4)) := X"E358_0000"; -- loop: cmp r8, #0
		tmp(to_integer(unsigned'(X"0000000C")/4)) := X"0A00_000B"; --       beq done
		tmp(to_integer(unsigned'(X"00000010")/4)) := X"E089_9008"; --       add r9, r9, r8
		tmp(to_integer(unsigned'(X"00000014")/4)) := X"E248_8001"; --       sub r8, r8, #1
		tmp(to_integer(unsigned'(X"00000018")/4)) := X"E358_0000"; --       cmp r8, #0
		tmp(to_integer(unsigned'(X"0000001C")/4)) := X"1AFF_FFF9"; --       bne loop ; #-7
		tmp(to_integer(unsigned'(X"00000020")/4)) := X"E3A0_A000"; -- if:   mov r10, #0
		tmp(to_integer(unsigned'(X"00000024")/4)) := X"E24A_A020"; --       sub r10, r10, #0x20
		tmp(to_integer(unsigned'(X"00000028")/4)) := X"E009_A00A"; --       and r10, r9, r10
		tmp(to_integer(unsigned'(X"0000002C")/4)) := X"E35A_0000"; --       cmp r10, #0
		tmp(to_integer(unsigned'(X"00000030")/4)) := X"0A00_0002"; --       beq  done
		tmp(to_integer(unsigned'(X"00000034")/4)) := X"E3A0_B001"; --       mov r11, #1
		tmp(to_integer(unsigned'(X"00000038")/4)) := X"E3A0_C004"; --       mov r12, #4
		tmp(to_integer(unsigned'(X"0000003C")/4)) := X"E58C_B000"; --       str r11, [r12]
		tmp(to_integer(unsigned'(X"00000040")/4)) := X"E59C_6000"; -- done: ldr r6, [r12]
		tmp(to_integer(unsigned'(X"00000044")/4)) := X"EAFF_FFFD"; --       b done ; #-3
	return tmp;
end init_rom;
	
-- Declare the ROM signal and specify a default value.
signal rom : memory_t := init_rom;

begin
	-- If address valid, then output the instruction.
	-- Otherwise, output a "here: b here" instruction to aid with debugging.
	RD <= rom(to_integer(unsigned(A))/4) when A(1 downto 0)=b"00" and A(31 downto 10) = ADDR_LEFT
			else B_HERE;

end architecture dataflow;
